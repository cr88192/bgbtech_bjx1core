Base32 ISA Subset:
* Spec for a 32-bit Sub-Mode of BJX1
** Focus is on backwards compatibility with the 32-bit SH ISA.
** Use of 64-bit features/registers is undefined.
** Area of focus will be confined to userland functionality.
* Only Basic FPU will be defined.

Details here are subject to change without warning.



== Overview ==

=== Registers ===

Registers:
*	Registers will be 32 bits.
*	R0..R15: General-Purpose Registers
**		R15/SP: Stack Pointer
*	SR: Status Register
*	GBR: Global Base Register
*	VBR: Vector Base Register
*	SSR: Saved Status Register
*	SPC: Saved PC
*	SGR: Saved R15/SP
*	DBR: Debug Base Register	
*	MACH: Multiply-Accumulate High
*	MACL: Multiply-Accumulate Low
*	PR: Procedure Register (Call/Return)
*	FPSCR: FPU Control Register
*	FPUL: FPU Load Register
*	PC: Program Counter
*	FR0..FR15: FPU Registers (Bank A)
*	XF0..XF15: FPU Registers (Bank B)

Interrupt:
* Outside of scope.

SR Bits:
*	0000_0001: T		//True/False Bit
*	0000_0002: S		//Specifies MAC Saturation
*	0000_00F0: IM		//Interrupt Level Mask
*	0000_0100: Q		//Q Bit (Divide)
*	0000_0200: M		//M Bit (Divide)
*	0000_0400: -
*	0000_0800: -
*	0000_1000: DQ		//Data Quad (Must Be Zero)
*	0000_2000: -
*	0000_4000: -
*	0000_8000: FD		//FPU Disable
*	0FFF_0000: -
*	1000_0000: BL		//Block Interrupts
*	2000_0000: RB		//Register Bank Select
*	4000_0000: MD		//User/Supervisor
*	8000_0000: JQ		//Operate in 64-bit mode (Must Be Zero)

SRH Bits:
*	Out of Scope for Base32

FPSCR bits:
*	0000_0003: RM	//Rounding Mode
*	0004_0000: DN	//Denormalization Mode
*	0008_0000: PR	//Precision
*	0010_0000: SZ	//Load/Store Size
*	0020_0000: FR	//Float Register Bank (Swap FRn/XFn)


=== Addressing and MMU ===

Userland address space:
* 0000_0000..7FFF_FFFF: Userland, MMU
* 8000_0000..BFFF_FFFF: Optional Userland, MMU
** May be available with BJX1 in 64-bit mode.


=== Delay Slot ===

Delay Slot:
For branches, the instruction immediately following the branch is located in a "delay slot". This instruction will execute prior to the jump landing at the target. Branches and PC relative operations are not allowed in this space. However, BT and BF will not execute the delay-slot instruction.

For PC relative instructions, the calculation will be performed relative to 4 bytes after the PC of the current instruction.
* Both Long and Quad operations will use a 32-bit alignment.
* For 32-bit instruction forms, this offset will be 6 bytes.

The endianess of instructions and PC-relative loads will always match the machine endianess.
Loads performed relative to registers will use the local endianess.

Note that 32-bit instruction forms will not be allowed in the delay slot.


=== Instruction Notation ===

Opcode Size Suffixes:
* .B, Byte (8-bit)
* .W, Word (16-bit)
* .L, DWord (32-bit)

Normal instructions will be 16 bit, and are expressed here as nibbles.
* 0..9, A..F: Expresses a literal hex value.
* m: Expresses a source register.
* n: Expresses a destination register.
* M: Expresses a source register as 0-7 with high-bit set.
* N: Expresses a destination register as 0-7 with high-bit set.
* d: Expresses a displacement.
* i: Expresses an immediate value (signed)
* j: Expresses an immediate value (unsigned)

Displacements:
* Are normally scaled by the size of the data type.
* disp4, disp8, and disp12 are zero extended.
* disp8s is sign-extended.


Memory Addressing Modes
* @Rm
** Access memory via address in Rm
* @Rm+
** Load from address in Rm, incrementing the address
* @-Rn
** Store to address given in Rn, first decrementing the address
* @(R0,Rm)
** Load or store to address given by R0+Rm
* @(PC,Rm)
** Load or store to address given by PC+Rm
** PC is typically the start address of the instruction +4.
** For 32-bit instructions, it is +6.
* @(GBR,disp)
** Memory access is GBR + a scaled displacement.
* @(Rm, disp)
** Address is Rm with a displacement scaled by the value size.
* @(Rm, Ro, disp)
** Address is given by Rm+(Ro+Disp)*Scale
** If Ro is R0, then Scale is 1 (Byte).
** If Ro is R15, then Ro is treated as if it held 0.


== Base ISA ==

If an instruction is preceded with a '/', it is not implemented, but more just to declare that a space is reserved for this instructions.

Instructions precded with '!' are extensions specific to this VM or ISA.
* '!?', possible, but debatable.
* '!!', very uncertain.
* '!' (No Instr), Not available in this mode.
* '!S' (No Instr), System Instr, Out of Scope.

SHAD/SHLD Shift (32-bit)
* 000n-nnnn		//Shift Left N bits
* 111n-nnnn		//Shift Right (32-N) bits
* 1110-0000		//All bits are bit 31
* Other cases will depend on sign and are mod32.

SHLL with variable shift
* Behaves like SHLD with a positive shift

SHLR with variable shift
* Behaves like SHLD with a negative shift if shift>0
* 0 behaves like SHLD with 0
* Negative values are undefined.

SHAR with variable shift
* Behaves like SHAD with a negative shift if shift>0
* 0 behaves like SHAD with 0
* Negative values are undefined.


=== Base 16-bit I-Forms ===

Basic I-Forms (16-bit)
* 0---
**	0--0 RES (32-bit ops)
**	0--1 RES (32-bit ops)
**	0--2
***		0n02 STC SR, Rn			//Copy SR to Rn
***		0n12 STC GBR, Rn		//Copy GBR to Rn
***		0n22 !S
***		0n32 !S
***		0n42 !S
***		0n52 -
***		0-62 -
***		0-72 -
***		0nM2 !S 
**	0--3
***		0m03 BSRF Rm			//Branch to Subroutine (PC+Rm+4)
***		0-13 -
***		0m23 BSAF Rm			//Branch to Label (PC+Rn+4)
***		0n33 -
***		0n43 -
***		0n53 -
***		0n63 -
***		0n73 -
***		0n83 PREF @Rn			//Prefetch memory for address
***		0n93 -
***		0nA3 -
***		0nB3 -
***		0nC3 MOVCA.L R0, Rn
***		0nE3 ICBI @Rn			//Invalidates I-Cache at Address
**	0nm4 MOV.B Rm, @(R0,Rn)		//Move Byte Rm to R0+Rn
**	0nm5 MOV.W Rm, @(R0,Rn)		//Move Word Rm to R0+Rn
**	0nm6 MOV.L Rm, @(R0,Rn)		//Move DWord Rm to R0+Rn
**	0nm7 MUL.L Rm, Rn			//Multiply Rm and Rn and store MACL
**	0--8						//Operations without arguments
***		0008 CLRT				//Clear SR.T
***		0018 SETT				//Set SR.T
***		0028 CLRMAC				//Clear MACH and MACL
***		0038 !
***		0048 CLRS				//Clear SR.S
***		0058 SETS				//Set SR.S
***		0068 NOTT
***		0078 -
***		0088 -
***		...
***		00F8 -
**	0--9
***		0009 NOP				//NOP
***		0019 DIV0U				//Unsigned Divide
***		0n29 MOVT Rn			//Copy T bit to Rn
***		0n39 MOVRT Rn

***		0mA9 MOVUA.L @Rm, R0	//MOV Unaligned
***		0mE9 MOVUA.L @Rm+, R0	//MOV Unaligned
***		00F9 -

**	0--A
***		0n0A STS MACH, Rn		//Copy MACH to Rn
***		0n1A STS MACL, Rn		//Copy MACL to Rn
***		0n2A STS PR, Rn			//Copy PR to Rn
***		0n3A !S
***		0n4A -
***		0n5A STS FPUL, Rn		//Copy FPUL to Rn
***		0n6A STS FPSCR, Rn		//Copy FPSCR to Rn

***		0nFA !S 
**	0--B
***		000B RTS				//Return from Function
***		001B SLEEP				//Sleep until interrupt
***		002B RTE				//Return From Exception
***		003B BRK				//Breakpoint Exception
***		004B -
***		005B / RESBANK
***		006B RTS/N
***		0m7B / RTV/N Rm
***		00AB / SYNCO			//Delay until all preceding operations complete
***             ...		
**	0nmC MOV.B @(R0,Rm), Rn		//Load Byte From R0+Rm into Rn
**	0nmD MOV.W @(R0,Rm), Rn		//Load Word/Quad From R0+Rm into Rn
**	0nmE MOV.L @(R0,Rm), Rn		//Load DWord From R0+Rm into Rn
**	0nmF MAC.L @Rm, @Rn			//Load/Mul Rm and Rn and add to MACH/MACL
* 1nmd MOV.L Rm, @(Rn,disp)		//Store DWord Rm to Rn+4*Disp
* 2---
**	2nm0 MOV.B Rm, @Rn			//Store Byte Rm to @Rn
**	2nm1 MOV.W Rm, @Rn			//Store Word/Quad Rm to @Rn
**	2nm2 MOV.L Rm, @Rn			//Store Rm to @Rn
**	2nm3 CAS.L Rm, Rn, @R0		//Compare and Exchange
**	2nm4 MOV.B Rm, @-Rn			//Store Rm to Byte @Rn then Rn=Rn-1
**	2nm5 MOV.W Rm, @-Rn			//Store Rm to Word/Quad @Rn then Rn=Rn-2|8
**	2nm6 MOV.L Rm, @-Rn			//Store Rm to DWord @Rn then Rn=Rn-4
**	2nm7 DIV0S Rm, Rn			//Setup for signed division
**	2nm8 TST Rm, Rn				//Test Rm&Rn, updating SR.T
**	2nm9 AND Rm, Rn				//And Rm and Rn, Storing result in Rn
**	2nmA XOR Rm, Rn				//Xor Rm and Rn, Storing result in Rn
**	2nmB OR Rm, Rn				//Or Rm and Rn, Storing result in Rn
**	2nmC CMPSTR Rm, Rn			//Compare Rm and Rn for matching bytes
**	2nmD XTRCT Rm, Rn			//Low bits from Rm and High bits from Rn
**	2nmE MULU.W Rm, Rn			//Multiply Unsigned Word/DWord, Dst=MACL
**	2nmF MULS.W Rm, Rn			//Multiply Signed Word/DWord, Dst=MACL
* 3---
**	3nm0 CMPEQ Rm, Rn			//Compare for Equality
**	3--1 RES (32-bit ops)
**	3nm2 CMPHS Rm, Rn			//Compare for unsigned Greater/Equal
**	3nm3 CMPGE Rm, Rn			//Compare for signed Greater/Equal
**	3nm4 DIV1 Rm, Rn			//Inner part of divide
**	3nm5 DMULU.L Rm, Rn			//Unsigned Multiply, result in MACH:MACL
**	3nm6 CMPHI Rm, Rn			//Compare for unsigned Greater
**	3nm7 CMPGT Rm, Rn			//Compare for signed Greater
**	3nm8 SUB Rm, Rn				//Subtract
**	3--9 RES (32-bit ops)
**	3nmA SUBC Rm, Rn			//Subtract, Carry -> T
**	3nmB SUBV Rm, Rn			//Subtract, Overflow -> T
**	3nmC ADD Rm, Rn				//Add
**	3nmD DMULS.L Rm, Rn			//Signed Multiply, result in MACH:MACL
**	3nmE ADDC Rm, Rn			//Add with Carry, Carry -> T
**	3nmF ADDV Rm, Rn			//Add, Overflow -> T
* 4---
**	4--0
***		4n00 SHLL Rn
***		4n10 DT Rn
***		4n20 SHAL Rn
***		4n80 -
***		4mF0 -
**	4--1
***		4n01 SHLR Rn
***		4n11 CMPPZ Rn
***		4n21 SHAR Rn
***             ..		
***		4n81 -
***		4n91 -
***		4nE1 -
***		4mF1 -
**	4--2
***		4n02 STS.L MACH, @-Rn
***		4n12 STS.L MACL, @-Rn
***		4n22 STS.L PR, @-Rn
***		4n32 !S
***		4n42 -
***		4n52 STS.L FPUL, @-Rn
***		4n62 STS.L FPSCR, @-Rn
***		4-72 -
***		..
***		4n62 STS.L DBR, @-Rn
**	4--3
***		4n03 STC.L SR, @-Rn
***		4n13 STC.L GBR, @-Rn
***		4n23 !S 
***		4n33 !S 
***		4n43 !S 
***		4n53 -
***		4n63 -
***		4-63 -
***		4-73 -
***		4nM3 !S 
**	4--4
***		4n04 ROTL Rn
***		4n14 !
***		4-24 ROTCL Rn
***		4n34 ! SHLL4 Rn				//(Rn<<4)->Rn
***		4n44 !
***		4n54 !
***		4n64 !
***		4m74 !
***		4n84 / DIVU R0, Rn
***		4n94 / DIVS R0, Rn
***		..
***		4-F4
***		4nF4 -
**	4--5
***		4n05 ROTR Rn				//Rotate Right
***		4n15 CMPPL Rn			//Compare Rn>0
***		4n25 ROTCR Rn
***		4n35 ! SHLR4 Rn				//(Rn>>4)->Rn
***		4n45 !
***		4m55 !
***		4n65 / MOV.L @PC+, Rn		//Inline load Imm32
***		4n75 !
***		4n85 -
***		4n95 -
***             ..		
***		4mE5 -
***		4nF5 -
**	4--6
***		4m06 LDS.L @Rm+, MACH
***		4m16 LDS.L @Rm+, MACL
***		4m26 LDS.L @Rm+, PR
***		4m36 !S
***		4m46 -
***		4m56 LDS.L @Rm+, FPUL
***		4m66 LDS.L @Rm+, FPSCR
***		4-76 -
***		..
***		4-F6 !S
**	4--7
***		4m07 LDC.L @Rm+, SR
***		4m17 LDC.L @Rm+, GBR
***		4m27 !S 
***		4m37 !S 
***		4m47 !S 
***		4m57 -
***		4-67 -
***		4-77 -
***		4mN7 !S
**	4--8
***		4n08 SHLL2 Rn
***		4n18 SHLL8 Rn
***		4n28 SHLL16 Rn
***		4n38 !
***		4m48 !
***		4n58 !
***		4-68 -
***		...
***		4-F8 -
**	4--9
***		4n09 SHLR2 Rn
***		4n19 SHLR8 Rn
***		4n29 SHLR16 Rn
***		4n39 !

***		4mA9 MOVUA.L @Rm, R0	//MOV Unaligned
***		4mE9 MOVUA.L @Rm+, R0	//MOV Unaligned
**	4--A
***		4m0A LDS Rm, MACH
***		4m1A LDS Rm, MACL
***		4m2A LDS Rm, PR
***		4m3A !S 
***		4m4A -
***		4m5A LDS Rm, FPUL
***		4m6A LDS Rm, FPSCR
***		4-7A -
***		..
***		4-EA -
***		4mFA !S 
**	4--B
***		4m0B JSR Rm
***		4m1B TAS.B Rm
***		4m2B JMP Rm
***             ..
***		4m4B JSR/N Rm
***             ..
***		4m8B MOV.B R0, @Rn+
***		4m9B MOV.W R0, @Rn+
***		4mAB MOV.L R0, @Rn+
***		4-BB -
***		4mCB MOV.B @-Rm, R0
***		4mDB MOV.W @-Rm, R0
***		4mEB MOV.L @-Rm, R0
***		4-FB -		
**	4nmC SHAD Rm, Rn
**	4nmD SHLD Rm, Rn
**	4--E
***		4m0E LDC Rm, SR
***		4m1E LDC Rm, GBR
***		4m2E LDC Rm, VBR
***		4m3E LDC Rm, SSR
***		4m4E LDC Rm, SPC
***		4m5E -
***		4-6E -
***		4-7E -
***		4mNE LDC Rm, Rm_B
**	4nmF MAC.W Rm, Rn
* 5nmd MOV.L @(Rm,disp), Rn
* 6---
**	6nm0 MOV.B @Rm, Rn		//Load Byte
**	6nm1 MOV.W @Rm, Rn		//Load Word or Quad
**	6nm2 MOV.L @Rm, Rn		//Load DWord
**	6nm3 MOV Rm, Rn			//MOV Registers
**	6nm4 MOV.B @Rm+, Rn		//Load Byte with post-increment
**	6nm5 MOV.W @Rm+, Rn		//Load Word or Quad with post-increment
**	6nm6 MOV.L @Rm+, Rn		//Loag DWord with post increment
**	6nm7 NOT Rm, Rn			//Bitwise Not
**	6nm8 SWAP.B Rm, Rn		//Swap Bytes
**	6nm9 SWAP.W Rm, Rn		//Swap Words
**	6nmA NEGC Rm, Rn		//Negate with carry
**	6nmB NEG Rm, Rn			//Negate
**	6nmC EXTU.B Rm, Rn		//Zero Extend Byte
**	6nmD EXTU.W Rm, Rn		//Zero Extend Word
**	6nmE EXTS.B Rm, Rn		//Sign Extend Byte
**	6nmF EXTS.W Rm, Rn		//Sign Extend Word
* 7nii ADD #imm, Rn			//Add immediate to register
* 8---
**	80nd MOV.B R0, @(Rn,disp)	//Store Byte
**	81nd MOV.W R0, @(Rn,disp)	//Store Word or Quad
***		Always Word if disp==0
**	82-- - XPFX1/Escape32B
**	83dd !
**	84md MOV.B @(Rm,disp), R0
**	85md MOV.W @(Rm,disp), R0
***		Always Word if disp==0
**	86-- !
**	87-- !
**	88ii CMPEQ #imm, R0
**	89dd BT label
**	8Aii-iiii MOVI24 #imm24, R0		//32-bit op, loads 24-bit immediate.
**	8Bdd BF label
**  8Cii XPFX2
***		8C0x..8C7x xxxx				//32-bit I-Forms
***		8C8x..8CFx xxxx				//64-bit I-Forms (Resv)
**	8Ddd BTS label
**	8Eii XPFX0/Escape32			//Escape for 32 bit I-Forms
***		Combines with a following instruction to form a new one.
**	8Fdd BFS label
* 9ndd MOV.W @(PC,disp), Rn
**	Load WORD from PC+4+disp*2
* Addd BRA label
* Bddd BSR label
* C---
**	C0dd MOV.B R0, @(GBR,disp)
**	C1dd MOV.W R0, @(GBR,disp)
**	C2dd MOV.L R0, @(GBR,disp)
**	C3jj TRAPA #imm
**	C4dd MOV.B @(GBR,disp), R0
**	C5dd MOV.W @(GBR,disp), R0
**	C6dd MOV.L @(GBR,disp), R0
**	C7dd MOVA @(PC,disp), R0		//Load Address into R0, DWORD aligned.
**	C8jj TST #imm, R0
**	C9jj AND #imm, R0
**	CAjj XOR #imm, R0
**	CBjj OR #imm, R0
**	CCjj TST.B #imm, @(GBR,R0)
**	CDjj AND.B #imm, @(GBR,R0)
**	CEjj XOR.B #imm, @(GBR,R0)
**	CFjj OR.B #imm, @(GBR,R0)
* Dndd MOV.L @(PC,disp), Rn			//Load DWord, DWord aligned.
* Enii MOV #imm8, Rn				//Load immediate into register.
* Fxxx: FPU/SIMD Block


=== Basic FPU ===

For full FPU, see NVSIMD Spec.
* A core may opt to instead provide a more basic FPU.
** Basic FPU will only provide for scalar operation.
* Or, none at all.
* ! will denote patterns that are in-use but unavailable in Basic FPU.

FPU (32-bit):
*	FPU Registers are 32-bit and hold single or split-double values
*	The FPUSCR.SZ bit controls whether to copy a single or register pair.
*	The FPUSCR.PR bit selects between Single and Split-Double calculations.

FPU (64-bit):
*	NV SIMD Spec covers the Full FPU
*	64-bit operation will be basically the same as 32-bit operation.
*	The FPU is basically a superset of the traditional FPU.


FPU Ops
* F---
**	Fnm0 FADD FRm, FRn
**	Fnm1 FSUB FRm, FRn
**	Fnm2 FMUL FRm, FRn
**	Fnm3 FDIV FRm, FRn
**	Fnm4 FCMPEQ FRm, FRn
**	Fnm5 FCMPGT FRm, FRn
**	Fnm6 FMOV.S @(R0,Rm), FRn
**	Fnm7 FMOV.S FRm, @(R0,Rn)
**	Fnm8 FMOV.S @Rm, FRn
**	Fnm9 FMOV.S @Rm+, FRn
**	FnmA FMOV.S FRm, @Rn
**	FnmB FMOV.S FRm, @-Rn
**	FnmC FMOV FRm, FRn
**	F--D
***		Fn0D FSTS FRn
***		Fm1D FLDS FRm
***		Fn2D FLOAT FRn
***		Fm3D FTRC FRm
***		Fn4D FNEG FRn
***		Fn5D FABS FRn
***		Fn6D FSQRT FRn
***		F-7D !
***		Fn8D FLDI0 FRn		//Load 0.0
***		Fn9D FLDI1 FRn		//Load 1.0
***		FnAD FCNVSD FRn
***		FnBD FCNVDS FRm
***		F-CD !
***		F-DD PSETMD #imm4
***		F-ED !
***		F-FD
****			F0FD !
****			F1FD !
****			F2FD !
****			F3FD FSCHG			//Flips FPSCR.SZ
****			F4FD !
****			F5FD !
****			F6FD !
****			F7FD FPCHG			//Flips FPSCR.PR
****			F8FD !
****			F9FD !
****			FAFD !
****			FBFD FRCHG			//Flips FPSCR.FR
****			FCFD !
****			FDFD !
****			FEFD !
**	FnmE FMAC FRm, FRn
**	F--F ! (BT Reserved-32)

The behavior of FPU operations will depend on FPSCR.PR and FPSCR.SZ:
* (PR=0, SZ=0): Arithmetic operators operate on Float, FMOV.S is also Float.
* (PR=1, SZ=0): Arithmetic operators operate on Double, FMOV.S is still Float.
* (PR=0, SZ=1): Arithmetic operators will operate on Float, FMOV.S is Pair.
** Copies a pair of floats, which are reversed on Little-Endian targets.
* (PR=1, SZ=1): BJX1, both arithmetic and FMOV.S will operate on Double.
** In BJX1, this will put the two halves in the correct order.

Likewise, there will be FPSCR.FR:
* When 0, Banks A and B will be in their normal order.
* When 1, Banks A and B will be swapped.
** This swaps FRn and XFn for Float operations.
** This swaps Even/Odd doubles for Double operation.


PSETMD 4-bit
* imm4=zpmm
** z: FPSCR.SZ
** p: FPSCR.PR
** mm: Rounding Mode
* Other bits for FPSCR are left as-is.

Behahior:
* Float operations will operate of FR0..FR15.
** FPSCR.FR will allow alternating between FR0..FR15 and XF0..XF15.
* Double operations will operate on Pairs.
** Even=(FR1, FR0), (FR3, FR2), ...
** Odd=(XF1, XF0), (XF3, XF2), ...
** In BJX1, there will be 16 logical double registers.
** In legacy operation, only the 8 even doubles are accessible.


Basic FPU will also include a few 32-bit forms:
*	8Evo-Fnm6 FMOV.S @(Rm,Ro), FRn
*	8Evo-Fnm7 FMOV.S FRm, @(Rn,Ro)
*	8Evd-Fnm8 FMOV.S @(Rm,disp4), FRn
*	8Ev0-Fnm9 FMOV.S @Rm+, FRn
*	8Evd-FnmA FMOV.S FRm, @(Rn,disp4)
*	8Ev0-FnmB FMOV.S FRm, @-Rn
*	8Evv-FnmC FMOV FRm, FRn		//S: FPU MOV

*	8Eii-FiDD PSETMD #imm12		//Packed Set Mode (Ext/Resv)

VV (FMOV/PMOV):
* wwww-xxyy
* wwww:
** 0000: FRm, FRn	//Copy FRn
** 0001: -
** 0010: -
** 0011:  Rm, FRn	//Copy GPR to FRn (FMOV.IS)
** 0100: -
** 0101: DRm, DRn	//Copy DRn
** 0110: -
** 0111: !
** 1000: Rm, Rn		//Copy GPR (MOV.L)
** 1001: -
** 1010: !
** 1011: -
** 1100: FRm,  Rn	//Copy FRm to GPR (FMOV.SI)
** 1101: !
** 1110: -
** 1111: !
* xx: Bit4/5 of Rn
* yy: Bit4/5 of Rm


VV (FMOV.S):
* wwxy
* ww=00: FRn
* ww=01: DRn
** Loads (FRn+0,FRn+1)
* ww=10: DRn
** Loads value in correct ordering for Double
* ww=11: ! XRn

PSETMD 12-bit
* imm12=000v-wwfz-pdmm
* v: ! VE
** Reserved (Set to 0) in Basic FPU.
* ww: ! Swap Mode
** Reserved (Set to 0) in Basic FPU.
* f: FR
* z: SZ
* p: PR
* d: DN
* mm: Rounding Mode
* Other bits for FPSCR are cleared to 0.


=== Misc 32-bit I-Forms ===

32-bit I-Forms (currently unsupported, reserved):
* 0ni0-iiii MOVI20 #imm, Rn
* 0ni1-iiii MOVI20S #imm, Rn

* 3nm1-0ddd MOV.B Rm, @(Rn, disp)
* 3nm1-1ddd MOV.W Rm, @(Rn, disp)
* 3nm1-2ddd MOV.L Rm, @(Rn, disp)
* 3nm1-3ddd FMOV.S FRm, @(Rn, disp)
* 3nm1-4ddd MOV.B @(Rm, disp), Rn
* 3nm1-5ddd MOV.W @(Rm, disp), Rn
* 3nm1-6ddd MOV.L @(Rm, disp), Rn
* 3nm1-7ddd FMOV.S @(Rm, disp), FRn
* 3nm1-8ddd MOVU.B @(Rm, disp), Rn
* 3nm1-9ddd MOVU.W @(Rm, disp), Rn

* 3ni9-Xddd !
** This group of instructions is not present in BJX1.


=== XPFX0: General 32-bit I-Forms ===

For XPFX0 I-Forms
* The prefix will give the high bits of multi-part immediates for 32-bit I-Forms.
* 8E12 EC34: MOV 0x1234, R12
* The endianess of each instruction WORD will depend on the target.


XPFX0/Escape32 I-Forms
*	0---
**      8Eoo-0oo0 (Resv)
**      8Eoo-0oo1 (Resv)
**      8Eoo-0oo2 (Resv)
**      8Eoo-0oo3 (Resv)
**		8Eod-0nm4 MOV.B Rm, @(Rn,Ro,disp4)	//Move Byte Rm to Rn+(Ro+disp)
**		8Eod-0nm5 MOV.W Rm, @(Rn,Ro,disp4)	//Move Word Rm to Rn+(Ro+disp)*2
**		8Eod-0nm6 MOV.L Rm, @(Rn,Ro,disp4)	//Rn+(Ro+disp)*4
**		8Eod-0nm7 !
**      8Eoo-0oo8 (Resv Ext No-Arg Ops)
**      8Eno-0oo9 (Resv Ext Unary Ops)
**      8Enm-0ooA Resv
**      8Enm-0ooB (Resv Ext Binary Ops)
**		8Eod-0nmC MOV.B @(Rm,Ro,disp4), Rn	//Load Byte At Rm+Ro+disp into Rn
**		8Eod-0nmD MOV.W @(Rm,Ro,disp4), Rn	//Load Word At Rm+(Ro+disp)*2 into Rn
**		8Eod-0nmE MOV.L @(Rm,Ro,disp4), Rn	//Load DWord
**		8Eod-0nmF !
* 	8Edd-1nmo MOV.L Rm, @(Rn,Ro,disp8s)		//Rn+4*(Ro+Disp)
*	2---
**		8Edd-2nm0 MOV.B Rm, @(Rn,disp8s)	//Store Byte Rm to @Rn
**		8Edd-2nm1 MOV.W Rm, @(Rn,disp8s)	//Store Word Rm to @Rn
**		8Edd-2nm2 MOV.L Rm, @(Rn,disp8s)	//Store DWord
**		8Edd-2nm3 !
**		8Edd-2nm4 FMOV.S FRm, @(Rn,disp8s)	//Store Float
**		8Edd-2nm5 !
**		8Edd-2nm6 FMOV.S @(Rm,disp8s), FRn	//Load Float
**		8Edd-2nm7 !
**		8Edd-2nm8 -
**		8Eii-2nm9 AND Rm, #imm8, Rn			//Rn=Rm&Imm8
**		8Eii-2nmA XOR Rm, #imm8, Rn			//
**		8Eii-2nmB OR Rm, #imm8, Rn			//
**		8Eeo-2nmC -
**		8Eeo-2nmD -
**		8Eii-2nmE MUL Rm, #imm8, Rn		//Rn=Rm*Imm8
**		8Eii-2nmF -
*	3---
**		8Eii-3ni0 CMPEQ #imm12, Rn		//Compare for unsigned Greater/Equal
**		8Eii-3ni1 -
**		8Eii-3ni2 CMPHS #imm12, Rn		//Compare for unsigned Greater/Equal
**		8Eii-3ni3 CMPGE #imm12, Rn		//Compare for signed Greater/Equal
**		8Edd-3nm4 -
**		8Edd-3nm5 -
**		8Eii-3ni6 CMPHI #imm12, Rn		//Compare for unsigned Greater
**		8Eii-3ni7 CMPGT #imm12, Rn		//Compare for signed Greater
**		8Eii-3nm8 SUB Rm, #imm8, Rn		//Rn=Rm-Imm8
**		8Eii-3ni9 -
**		8Edd-3nmA -
**		8Edd-3nmB -
**		8Eii-3nmC ADD Rm, #imm8, Rn		//Rn=Rm+Imm8
**		8Edd-3nmD -
**		8Edd-3nmE -
**		8Edd-3nmF -
*	4---
**		8Exx-4xx0 -
**		...
**		8Exx-4xx3 -
**		8Exx-4xx4
***			8Eii-4n84 MOV.B #imm, @Rn			//Store Imm to memory
***			8Eii-4n94 MOV.W #imm, @Rn			//
***			8Eii-4nA4 MOV.L #imm, @Rn			//
***			8Eii-4nB4 !
***			8Eii-4nC4 MOV.B #imm, @-Rn			//Store Imm to memory (Dec)
***			8Eii-4nD4 MOV.W #imm, @-Rn			//
***			8Eii-4nE4 MOV.L #imm, @-Rn			//
***			8Eii-4nF4 !
**		8Exx-4xx5 -
**		...
**		8Exx-4xxB -
**		8Eii-4nmC SHAD Rm, #imm, Rn		//Rn=Rm SAL Imm8 | Rn=Rm SAR Imm8
**		8Eii-4nmD SHLD Rm, #imm, Rn		//Rn=Rm SHL Imm8 | Rn=Rm SHR Imm8
**		8Exx-4xxE -
**		8Exx-4xxF -
*	8Edd-5nmo MOV.L @(Rm,Ro,disp), Rn		//Rm+(Ro+disp)*4
*	6---
**		8Edd-6nm0 MOV.B @(Rm,disp8s), Rn
**		8Edd-6nm1 MOV.W @(Rm,disp8s), Rn
**		8Edd-6nm2 MOV.L @(Rm,disp8s), Rn
**		8Edd-6nm3 !
**		8Eod-6nm4 LEA.B @(Rm,Ro,disp4), Rn	//Load Byte At Rm+Ro+disp into Rn
**		8Eod-6nm5 LEA.W @(Rm,Ro,disp4), Rn	//Load Word At Rm+(Ro+disp)*2 into Rn
**		8Eod-6nm6 LEA.L @(Rm,Ro,disp4), Rn	//Load DWord
**		8Eod-6nm7 LEA.Q @(Rm,Ro,disp4), Rn	//Load QWord
**		8Edd-6nm8 LEA.B @(Rm,disp8s), Rn	//Rn=Rm+disp*1
**		8Edd-6nm9 LEA.W @(Rm,disp8s), Rn	//Rn=Rm+disp*2
**		8Edd-6nmA LEA.L @(Rm,disp8s), Rn	//Rn=Rm+disp*4
**		8Edd-6nmB LEA.Q @(Rm,disp8s), Rn	//Rn=Rm+disp*8
**		8Edd-6nmC MOVU.B @(Rm,disp8s), Rn	//Rm+disp*1
**		8Edd-6nmD MOVU.W @(Rm,disp8s), Rn	//Rm+disp*2
**		8Edd-6nmE MOVU.L @(Rm,disp8s), Rn	//Rm+disp*4
**		8Edd-6nmF -

*	8Eii-7nii ADD #imm16, Rn
* 	8---
**		8Edd-80no -
**		8Edd-81no -
**		8Edd-82dd BRA/N disp16				//BRA, No Delay Slot
**		8Edd-83dd BSR/N disp16				//BSR, No Delay Slot
**		8Edd-84mo -
**		8Edd-85mo -
**		8Edd-86mo -
**		8Edd-87mo -
**		8Eii-88ii CMPEQ #imm16, R0
**		8Edd-89dd BT disp16
**		8Eii-8Aii -
**		8Edd-8Bdd BF disp16
**		8Eii-8Cii LDSH16 #imm, R0			//R0=(R0 SHL 16)|Imm16  (QWord)
**		8Edd-8Ddd BTS disp16
**		8Exx-8Exx -
**		8Edd-8Fdd BFS disp16
*	8Edd-9ndd MOVA @(PC,disp13), Rn			//Rn=PC+disp16*4, DWord Aligned
**		8E0d-9ndd MOVA @(PC,disp13), Rn		//disp*4, Load DWord Addr
**		8E2d-9ndd MOVU.W @(PC,disp13), Rn	//disp*2, Load Word (Zero Ext)
**		8E4d-9ndd FMOV.S @(PC,disp13), FRn	//disp*4, Load Float
**		8E6d-9ndd !
**		8E8d-9ndd FMOV.S @(PC,disp13), XFn	//disp*4, Load Float
**		8EAd-9ndd !
**		8ECd-9ndd FMOV.D @(PC,disp13), YDn	//disp*4, Load Double
**		8EEd-9ndd FMOV.D @(PC,disp13), DRn	//disp*4, Load Double
*	8Edd-Addd BRA disp20
*	8Edd-Bddd BSR disp20
*	C---
**		8Exx-C0xx -
**		8Exx-C1xx -
**		8Exx-C2xx -
**		8Exx-C3xx -
**		8Exx-C4xx -
**		8Exx-C5xx -
**		8Exx-C6xx -
**		8Exx-C7xx -
**		8Ejj-C8nj TST #imm12, Rn
**		8Ejj-C9nj AND #imm12, Rn
**		8Ejj-CAnj XOR #imm12, Rn
**		8Ejj-CBnj OR #imm12, Rn
**		8Exx-CCxx -
**		8Exx-CDxx -
**		8Exx-CExx -
**		8Exx-CFxx -

*	8Eed-Dndd MOV.W/L/Q @(PC,disp13), Rn	//
**		8E0d-Dndd MOV.L @(PC,disp13), Rn	//disp*4, Load DWord
**		8E2d-Dndd MOV.W @(PC,disp13), Rn	//disp*2, Load Word (Sign Ext)
**		8E4d-Dndd !
**		8E6d-Dndd MOV.W @(PC,disp13), RHn	//disp*2, Load High Word
**		8E8d-Dndd !
**		8EAd-Dndd !
**		8ECd-Dndd !
**		8EEd-Dndd !

*	8Eii-Enii MOV #imm16, Rn
*	8Exx-Fxxx (Ext-FPU / SIMD)


=== XPFX2-OPREX: Explicit Reg/Size Forms ===

OPREX is not available in 32-bit mode.


=== XPFX2-TACB: Three Address Block ===

* 8C3e-bnst						// 3-Address Binary Operator
** e: QNST
*** Q: 0=Single/DWORD, 1=Double
*** N: Bit 4 for Rn (Base32: FPU Only)
*** S: Bit 4 for Rs (Base32: FPU Only)
*** T: Bit 4 for Rt (Base32: FPU Only)
** 8C3e-0nst ADD Rs, Rt, Rn			// Rn=Rs+Rt
** 8C3e-1nst SUB Rs, Rt, Rn			// Rn=Rs-Rt
** 8C3e-2nst MUL Rs, Rt, Rn			// Rn=Rs*Rt
** 8C3e-3nst AND Rs, Rt, Rn			// Rn=Rs&Rt
** 8C3e-4nst OR  Rs, Rt, Rn			// Rn=Rs|Rt
** 8C3e-5nst XOR Rs, Rt, Rn			// Rn=Rs^Rt
** 8C3e-6nst SHLL Rs, Rt, Rn		// (Q=0|e=8) Rn=Rs<<Rt
** 8C3e-7nst SHLR Rs, Rt, Rn		// (Q=0|e=8) Rn=Rs>>Rt (Unsigned)
** 8C3e-8nst SHAR Rs, Rt, Rn		// (Q=0|e=8) Rn=Rs>>Rt (Signed)
** 8C3e-9nst -
** 8C3e-Anst -
** 8C3e-Bnst -
** 8C3e-Cnst FADD FRs, FRt, FRn		// FRn=FRs+FRt
** 8C3e-Dnst FSUB FRs, FRt, FRn		// FRn=FRs-FRt
** 8C3e-Enst FMUL FRs, FRt, FRn		// FRn=FRs*FRt
** 8C3e-Fnst FDIV FRs, FRt, FRn		// FRn=FRs/FRt
