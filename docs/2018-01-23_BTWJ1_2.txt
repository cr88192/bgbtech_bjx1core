BGBTech WideJex 1
* Another Random ISA idea.
* VLIW Based.
* Instruction blocks are 64 or 128 bits.
** These will encode 2 or 4 logical instructions.
* Each logical instruction will be 24 bits.
* Will constrain the positions in which instructions can appear.
** Each 128-bit cache block is divided into positions.
*** (PC&15): 0, 2, 4, 6, 8, A, C, E.
** 16 and 32 bit (SH/BJX1) instructions may appear in any position.
** Standalone 64-bit blocks may appear in 0..A if W=0.
** 64-bit blocks may only appear in position 0 or 8 if W=1.
** 128-bit blocks may only appear in position 0 (128-bit aligned)
* Actual width of core is variable.
** Whether 2, 4, or more instructions may execute per cycle is not defined.
** Code should not be generated to depend on a particular width.


64-bit block:
* 8CAt_uuvv_uuuu_vvvv
* t=WABC
** W: Allow Chain
** A: XE/A (Slot 1)
** B: XE/B (Slot 2)
** C: Reserved (0)
* W:
** Setting this bit allows the following block to execute in parallel.
** Only allowed to be set at positions 0 or 8.
** If a 64-bit block chains from position 8, effective width is undefined.
* XE:
** Changes the encoding/interpretation of some instructions.
** Is undefined or ignored for others.

128-bit block:
* Consists of a pair of 64-bit blocks end-to-end.
** 8CAt_uuvv_uuuu_vvvv_8CAt_xxyy_xxxx_yyyy
* The first block has T.W set.
** Second T.W: Whether the following block may be chained.
* Requires proper 128-bit alignment.
* First block will be slots 1 and 2, Second block will be slots 3 and 4.


Registers:
* Register space will be the same as BJX1-64A.
* Uses 32 GPRs each of which is 64 bits.
** R15 will be a Stack Pointer.
*** For slots other than Slot1, R15 will be Read Only.

* SRn: Status Registers
** SR0: MACH
** SR1: MACL
** SR2: PR, Program Link Register
* CRn: Control Registers
** CR0: SR, Status Flags Register
** CR1: GBR, Global Base Register (?)
** CR2: VBR, Vector Base Register


* Some instructions will be specific to specific slots.
** Compare and Branch instructions may only appear in Slot1.
** MUL and SHAD may also be specific to Slot1.
** Along with operations which access memory.
** Along with anything else that modifies SR.

* Branches may have a Delay Slot.
** In delay-slot forms, the following instruction block will be executed.
** In non-delay-slot forms, the pipeline will be flushed.
** F.N: Will select between Word and QWord.
*** F.N=0: PC1=(PC+10)+(disp*2)
*** F.N=1: PC1=((PC+16)&(~7))+(disp*8)

Nibble:
* d: Displacement

* e: Extension
** e=QNMO
** Q: 0=DWORD, 1=QWORD
*** Reserved / MBZ for ops which are size-independent.
** N/M/O: Bit 4 of Rn, Rm, and Ro.
** Some ops with no Ro may use O to encode Unsigned forms.
*** 0zz0: MOV.L, MULL.L
*** 0zz1: MOVU.L, MULU.L
*** 1zz0: MOV.Q, MUL.Q
*** 1zz1: Resv
** XE=1: Instruction specific.
*** Unless otherwise specified, XE is Reserved and MBZ.
* f: Extension 2
** f=NMII / NIII
** XE=1: f=IIII (Rn and Rm are R0..R15)
* m: Rm, typically Source.
* n: Rn, typically Dest.
* o: Ro, typically Index.
* s: Rs, Source A (LHS).
* t: Rt, Source B (RHS).

* z: Unknown / Reserved, Set to Zero


Major Instruction Forms:
* eOOnOO
* eOOnmO
* fiOnmO
* eoOnmO
* fdOnmO
* edOnmo
* iiOnii

Instructions:
* ez0nm0  -
* ez0nm1  -
* ez0nm2  -
* ez0nm3  -
* eo0nm4  MOV.B		Rm, @(Rn, Ro)
* eo0nm5  MOV.W		Rm, @(Rn, Ro)
* eo0nm6  MOV.L		Rm, @(Rn, Ro)
* eo0nm7  MOV.Q		Rm, @(Rn, Ro)
* ez0nm8
** zz0z08 -

** e10m18 CMP/PZ	Rn
** eA0m18 ! MOV.Q	Rm, @(PC, R0)
** eB0m18 ! FMOV.S	FRm, @(PC, R0)
** eC0m18 ! MOV.B	Rm, @(PC, R0)
** eD0m18 ! MOV.W/Q	Rm, @(PC, R0)
** eE0m18 ! MOV.L	Rm, @(PC, R0)

** zz0z28 -

** e00n38 BSRF		Rn				//BSR, PC+Rn (Indirect Relative Call)
** e10n38 JSR		Rn				//BSR, Rn (Indirect call to address)
** e20n38 BRAF		Rn				//BRA, PC+Rn (Indirect Relative Branch)
** e30n38 JMP		Rn				//BRA, Rn (Indirect branch to address)

** zz0z48 -

** e10m58 CMP/PL	Rn
** eA0n58 ! MOV.Q @(PC, R0), Rn
** eB0n58 ! FMOV.S @(PC, R0), FRn
** eC0n58 ! MOV.B @(PC, R0), Rn
** eD0n58 ! MOV.W/Q @(PC, R0), Rn
** eE0n58 ! MOV.L @(PC, R0), Rn
** eF0n58 ! LEA.B @(PC, R0), Rn

** zz0z68 -
** zz0z78 -
** z00z88 CLRT
** z10z88 SETT
** z20z88 -
** z30z88 -
** z40z88 CLRS
** z50z88 CLRS
** z60z88 NOTT
** z00z98 NOP
** zz0zA8 -
** z00zB8 RTS
** z10zB8 SLEEP
** z20zB8 RTE
** z30zB8 BREAK
** z40zB8 -
** z50zB8 -
** z60zB8 RTS/N
** e70mB8 RTV/N
** zz0zC8 -
** zz0zD8 -
** zz0zE8 -
** zz0zF8 -
* ez0nm9  -
* ez0nmA
** e00nmA STS		Sm, Rn
** e10nmA STC		Cm, Rn
** e20nmA STS		Sm, @-Rn
** e30nmA STC		Cm, @-Rn
** e40nmA LDS		Rn, Sm
** e50nmA LDC		Rn, Cm
** e60nmA LDS		@Rn+, Sm
** e70nmA LDC		@Rn+, Cm
** e80nmA ? MOV		Rm, Rn
* ez0nmB  -
* eo0nmC  MOV.B		@(Rm, Ro), Rn
* eo0nmD  MOV.W		@(Rm, Ro), Rn
* eo0nmE  MOV.L		@(Rm, Ro), Rn
* eo0nmF  MOV.Q		@(Rm, Ro), Rn

* ed1nmo  MOV.L/Q	Rm, @(Rn, Ro, disp4)

* fd2nm0  MOV.B		Rm, @(Rn, disp6)		//Store Byte Rm to @Rn
* fd2nm1  MOV.W		Rm, @(Rn, disp6)		//Store Word Rm to @Rn
* fd2nm2  MOV.L		Rm, @(Rn, disp6)		//Store DWord Rm to @Rn
* fd2nm3  MOV.Q		Rm, @(Rn, disp6)		//Store QWord Rm to @Rn
* ez2nm4  -
* ez2nm5  -
* ez2nm6  -
* ez2nm7  -
* ez2nm8  -
* fj2nm9  AND		Rm, #imm6, Rn		//And
* fj2nmA  XOR		Rm, #imm6, Rn		//Xor
* fj2nmB  OR		Rm, #imm6, Rn		//Or
* fi2nmC  -
* fi2nmD  -
* fj2nmE  MULL		Rm, #imm6, Rn	//Rn=Rm*Imm6 (Imm6 Zero-Ext)
* fj2nmF  MULL		Rm, #-imm6, Rn	//Rn=Rm*Imm6 (Imm6 One-Ext)

* fi3ni0  CMP/EQ	#imm10s, Rn		//Compare for Equality
* ez3nm1  -
* fi3ni2  CMP/HS	#imm10s, Rn		//Compare for Greater/Equal
* fi3ni3  CMP/GE	#imm10s, Rn		//Compare for Greater/Equal
* ez3nm4  -
* ez3nm5  -
* fi3ni6  CMP/HI	#imm10s, Rn		//Compare for Greater
* fi3ni7  CMP/GT	#imm10s, Rn		//Compare for Greater
* fj3nm8  SUB		Rm, #imm6, Rn	//Subtract, Rn=Rm-imm6
* fj3nm9  AND		Rm, #-imm6, Rn
* fi3nmA  SHAL.Q	Rm, #imm6, Rn
* fi3nmB  SHLL.Q	Rm, #imm6, Rn
* fj3nmC  ADD		Rm, #imm6, Rn	//Add, Rn=Rm+imm6
* ez3nmD  -
* fi3nmE  SHAR.Q	Rm, #imm6, Rn
* fi3nmF  SHLR.Q	Rm, #imm6, Rn

* ez4nm0  -
* ez4nm1  -
* ez4nm2  -
* ez4nm3  -
* ez4nm4  -
* ez4nm5  -
* ez4nm6  -
* ez4nm7  -
* ez4nm8  -
* ez4nm9  -
* ez4nmA  -
* ez4nmB  -
* fi4nmC  SHAD.L Rm, #imm6, Rn
* fi4nmD  SHLD.L Rm, #imm6, Rn
* ez4nmE  -
* ez4nmF
** e04nmF CMP/EQ	Rm, Rn			//e.o=0: Compare for Equality
** e14nmF -
** e24nmF CMP/HS	Rm, Rn			//Compare for unsigned Greater/Equal
** e34nmF CMP/GE	Rm, Rn			//Compare for signed Greater/Equal
** e44nmF -
** e54nmF DMULU.L	Rm, Rn			//MAC=Rm*Rn
** e64nmF CMP/HI	Rm, Rn			//Compare for unsigned Greater
** e74nmF CMP/GT	Rm, Rn			//Compare for signed Greater
** e84nmF TST		Rm, Rn			//Test Rm&Rn, updating SR.T
** e94nmF MUL.L/Q	Rm, Rn			//MAC=Rm*Rn
** eA4nmF SUBC		Rm, Rn			//Subtract, Carry -> T
** eB4nmF SUBV		Rm, Rn			//Subtract, Overflow -> T
** eC4nmF -
** eD4nmF DMULS.L	Rm, Rn			//MAC=Rm*Rn
** eE4nmF ADDC		Rm, Rn			//Add with Carry, Carry -> T
** eF4nmF ADDV		Rm, Rn			//Add, Overflow -> T

* ed5nmo  MOV.L/Q	@(Rm, Ro, disp4), Rn

* fd6nm0  MOV.B		@(Rm, disp6), Rn
* fd6nm1  MOV.W		@(Rm, disp6), Rn
* fd6nm2  MOV.L		@(Rm, disp6), Rn
* fd6nm3  MOV.Q		@(Rm, disp6), Rn
* eo6nm4  LEA.B		@(Rm, Ro), Rn
* eo6nm5  LEA.W		@(Rm, Ro), Rn
* eo6nm6  LEA.L		@(Rm, Ro), Rn
* eo6nm7  LEA.Q		@(Rm, Ro), Rn
* fd6nm8  LEA.B		@(Rm, disp6), Rn
* fd6nm9  LEA.W		@(Rm, disp6), Rn
* fd6nmA  LEA.L		@(Rm, disp6), Rn
* fd6nmB  LEA.Q		@(Rm, disp6), Rn
* fd6nmC  MOVU.B	@(Rm, disp6), Rn
* fd6nmD  MOVU.W	@(Rm, disp6), Rn
* fd6nmE  MOVU.L	@(Rm, disp6), Rn
* ez6nmF
** e06nmF MOV.B		Rm, @-Rn		//Store Rm to Byte @Rn then Rn=Rn-1
** e16nmF MOV.W		Rm, @-Rn		//Store Rm to Word @Rn then Rn=Rn-2
** e26nmF MOV.L/Q	Rm, @-Rn		//Store Rm to DWord @Rn then Rn=Rn-4
** e36nmF MOV		Rm, Rn
** e46nmF MOV.B		@Rm+, Rn
** e56nmF MOV.W		@Rm+, Rn
** e66nmF MOV.L/Q	@Rm+, Rn
** e76nmF NOT		Rm, Rn
** e86nmF SWAP.B	Rm, Rn				//Swap Bytes
** e96nmF SWAP.W	Rm, Rn				//Swap Words
** eA6nmF NEGC		Rm, Rn
** eB6nmF NEG		Rm, Rn
** eC6nmF EXTU.B	Rm, Rn
** eD6nmF EXTU.W/L	Rm, Rn
** eE6nmF EXTS.B	Rm, Rn
** eF6nmF EXTS.W/L	Rm, Rn

* ii7nii  ADD #imm16s, Rn			//Add 16-bit Immed
** XE=0: Rn=R16..R31
** XE=1: Rn=R0..R15

* zz80zz  -
* zz81zz  -
* fd82dd  BRA/N disp15s
* fd83dd  BSR/N disp15s
* zz84zz  -
* zz85zz  -
* fd86dd  BRA disp15s
* fd87dd  BSR disp15s
* zz88zz  -
* fd89dd  BT disp15s
* ii8Aii  LDHF16 #imm, FPUL			//Load Half Imm16 into FPUL Float
* fd8Bdd  BF disp15s
* ii8Cii  LDIF16 #imm, FPUL			//Load (Imm16<<16) into FPUL
* fd8Ddd  BTS disp15s
* zz8Ezz  -
* fd8Fdd  BFS disp15s

* ii9nii  LDSH16 #imm16, Rn			//Rn=(Rn<<16)+Imm16
** XE=0: Rn=R16..R31
** XE=1: Rn=R0..R15

* eoAnm0  ADD		Rm, Ro, Rn		//Add, Rn=Rm+Ro
* eoAnm1  SUB		Rm, Ro, Rn		//Subtract, Rn=Rm-Ro
* eoAnm2  MUL		Rm, Ro, Rn		//Multiply, Keep Low Bits, Rn=Rm*Ro
* eoAnm3  AND		Rm, Ro, Rn		//And Rm and Rn, Storing result in Rn
* eoAnm4  OR		Rm, Ro, Rn		//Rn=Rm|Ro
* eoAnm5  XOR		Rm, Ro, Rn		//Rn=Rm^Ro
* eoAnm6  SHAD.L/Q	Rm, Ro, Rn
* eoAnm7  SHLD.L/Q	Rm, Ro, Rn
* eoAnm8  CSELT		Rm, Ro, Rn		//Rn=SR.T?Rm:Ro
* eoAnm9  -
* eoAnmA  MULUH		Rm, Ro, Rn		//Multiply, Rn=(Rm*Ro)>>N
* eoAnmB  MULSH		Rm, Ro, Rn		//Multiply, Rn=(Rm*Ro)>>>N
* eoAnmC  SHAR.L/Q	Rm, Ro, Rn
* eoAnmD  SHLR.L/Q	Rm, Ro, Rn
* eoAnmE  -
* eoAnmF  -

* iiBiii  MOV		#imm20s, R0		//(XE=1)

* zzCzzz  -
* fdC0md ? MOV.B	Rm, @(GBR, disp10s)		//(XE=0)
* fdC1md ? MOV.W	Rm, @(GBR, disp10s)		//(XE=0)
* fdC2md ? MOV.L	Rm, @(GBR, disp10s)		//(XE=0)
* fdC3md ? MOV.Q	Rm, @(GBR, disp10s)		//(XE=0)
* fdC4nd ? MOV.B	@(GBR, disp10s), Rn		//(XE=0)
* fdC5nd ? MOV.W	@(GBR, disp10s), Rn		//(XE=0)
* fdC6nd ? MOV.L	@(GBR, disp10s), Rn		//(XE=0)
* fdC5nd ? MOV.Q	@(GBR, disp10s), Rn		//(XE=0)
** F.N: 0=GBR, 1=SP

* iiDiii  -

* iiEnii MOV		#imm16s, Rn		//Load 16-bit constant
** XE=0: Rn=R16..R31
** XE=1: Rn=R0..R15

* zzFzzz

* eoFnm0  FADD		FRm, FRo, FRn
* eoFnm1  FSUB		FRm, FRo, FRn
* eoFnm2  FMUL		FRm, FRo, FRn
* eoFnm3  FDIV		FRm, FRo, FRn
* eoFnm4  -
* eoFnm5  -
* eoFnm6  FMOV		@(Rm, Ro), FRn
* eoFnm7  FMOV		FRm, @(Rn, Ro)
* edFnm8  FMOV		@(Rm, disp5), FRn
* eoFnm9  -
* edFnmA  FMOV		FRm, @(Rn, disp5)
* eoFnmB  -
* eoFnmC
*  e0FnmC -
*  e1FnmC -
*  e2FnmC -
*  e3FnmC -
*  e4FnmC FCMPEQ	FRm, FRn
*  e5FnmC FCMPGT	FRm, FRn
*  e6FnmC FMOV		Rm, FRn
*  e7FnmC FMOV		FRm, Rn
*  e8FnmC -
*  e9FnmC FMOV		@Rm+, FRn
*  eAFnmC -
*  eBFnmC FMOV		FRm, @Rn-
*  eCFnmC FMOV		FRm, FRn
*  eDFnmC -
*  eEFnmC -
*  eFFnmC -

* eoFnmD
*  e0Fn0D FSTS		FRn
*  e1Fm0D FLDS		FRm
*  e2Fn0D FLOAT		FRn
*  e3Fm0D FTRC		FRm
*  e4Fn0D FNEG		FRn
*  e5Fn0D FABS		FRn
*  e6Fn0D FSQRT		FRn
*  e7Fi0D -
*  e8Fn0D FLDI0		FRn		//Load 0.0
*  e9Fn0D FLDI1		FRn		//Load 1.0
*  eAFn0D FCNVSD	FRn
*  eBFn0D FCNVDS	FRm
*  eCFi0D -
*  iDFi0D PSETMD	#imm8
*  eEFi0D -
*  eFFi0D -
* eoFnmE
* eoFnmF


