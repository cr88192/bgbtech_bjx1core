BGBTech BJX1-64C
* Combine BJX1, BWJX1 and B64V/B64C.
* Not binary compatible with BJX1-64A or BJX1-64B.


=== General ===

Registers:
* R0 .. R15, GPRs are 64 bit.
** R0 will be a Stomp Register
** R15 will be a Stack Pointer
* R16..R31, Extended GPRs
* CR0 .. CR7
* SR0 .. SR7
* R0B .. R7B, Alternate versions of R0..R7.

FPU Registers:
* FR0 .. FR15: Float Registers (Base)
* XF0 .. XF15: Float Registers (Extended)
* DR0 .. DR15: Double Registers

Status Register (SRn)
* SR0, MACH
* SR1, MACL
* SR2, PR
* SR3, SGR
* SR4, -
* SR5, FPUL
* SR6, FPSCR
* SR7, -

Control Registrer (CRn)
* CR0, SR
* CR1, GBR
* CR2, VBR
* CR3, SSR
* CR4, SPC
* CR5, -
* CR6, -
* CR7, PC
* CR8 , R0B
* CR9 , R1B
* CR10, R2B
* CR11, R3B
* CR12, R4B
* CR13, R5B
* CR14, R6B
* CR15, R7B

Interrupt:
* SR, SP, and PC saved to SSR, SGR, and SPC.
* Swap R0..R7 with R0B .. R7B.
* Swap R16..R23 with R16B .. R23B.
* Branch to VBR+0x100 or similar


C ABI
* Arguments: R4..R7, R20..R23
** Structures: Pass by Register or Reference (Size > 8B)
* Preserved: R8..R14, R24..R31
** Stack Pointer: R15
* Return Value: R0, R1
* Struct Return: R2 (Size > 8B)
* Global Base: R3 (Sub-ABI Specific)


=== Base 16-bit ISA ===

Nibble:
* d: Displacement
* m: Rm, typically Source.
* n: Rn, typically Dest.
* o: Ro, typically Index.
* z: Unknown / Reserved, Set to Zero

Instructions
* 0---
**	0zz0 -
**	0zz1 -
**	0nm2 STC	CRm, Rn			//Copy CRm to Rn
**	0zz3
***  0m03 BSRF Rm			//Branch to Subroutine (PC+Rm+4)
***  0-13 -
***  0m23 BRAF Rm			//Branch to Label (PC+Rn+4)
***  0n33 -
***  0n43 -
***  0n53 -
***  0n63 -
***  0n73 -
***  0n83 PREF @Rn			//Prefetch memory for address
***  0n93 -
***  0nA3 -
***  0nB3 -
***  0nC3 MOVCA.L R0, Rn
***  0nE3 ICBI @Rn			//Invalidates I-Cache at Address
**	0nm4 MOV.B	Rm, @(Rn, R0)	//Move Byte Rm to R0+Rn
**	0nm5 MOV.W	Rm, @(Rn, R0)	//Move Word Rm to R0+Rn
**	0nm6 MOV.L	Rm, @(Rn, R0)	//Move DWord Rm to R0+Rn
**	0nm7 MOV.Q	Rm, @(Rn, R0)	//Move QWord Rm to R0+Rn
**	0zz8						//Operations without arguments
***	 0008 CLRT					//Clear SR.T
***	 0018 SETT					//Set SR.T
***	 0028 / CLRMAC				//Clear MACH and MACL
***	 0038 / LDTLB				//LDTLB
***	 0048 CLRS					//Clear SR.S
***	 0058 SETS					//Set SR.S
***	 0068 NOTT
***  0z78 -
***  0088 -
***  0098 -
***  00A8 -
***  00B8 -
***  00C8 -
***  00D8 -
***  00E8 -
***  0zF8 -
****  00F8 BRA0					//Branch to PC+4+R0*2
****  01F8 BSR0					//Call to PC+4+R0*2
****  02F8 BRT0					//Branch if True to PC+4+R0*2
****  03F8 BRF0					//Branch if False to PC+4+R0*2
****  04F8 DIV1		R5, R4		//DIV1 R5, R4
****  05F8 DIV0S	R5, R4		//DIV0S R5, R4
****  06F8 CAS.L	R5, R4, R0	//CAS.L R5, R4, @R0

****  08F8 XTRCT	R4, R0		//
****  09F8 XTRCT	R0, R4		//

**	0--9
***  0i09 NOP						//NOP
***  0019 DIV0U						//Unsigned Divide
***  0n29 MOVT		Rn				//Copy T bit to Rn
***  0n39 MOVRT		Rn
***  0m49 / BSRF		Rm			//Branch to Subroutine (PC+4+Rm)
***  0m59 / JSR		Rm				//Branch to Subroutine (Rm)
***  0m69 / BRAF		Rm			//Branch to Label (PC+4+Rm)
***  0m79 / JMP		Rm				//Branch to Label (Rm)
***  0m89 -
***  0m99 -
***  0mA9 -
***  0mB9 -
***  0nC9 -
***  0mD9 PREF		@Rn				//Prefetch memory for address
***  0nE9 ICBI		@Rn				//Invalidates I-Cache at Address
***  0mF9 -
**	0nmA STS		SRm, Rn			//Copy SRm to Rn
**	0zzB
***  000B RTS				//Return from Function
***  001B SLEEP				//Sleep until interrupt
***  002B RTE				//Return From Exception
***  003B BRK				//Breakpoint Exception
***  004B -
***  005B -
***  006B RTS/N
***  0m7B ? RTV/N Rm
***  0x8B -
***  0x9B -
***  00AB -
***  0xBB -
***  0xCB -
***  0xDB -
***  0xEB -
***  0xFB -
**	0nmC MOV.B		@(Rm, R0), Rn	//Load Byte From R0+Rm into Rn
**	0nmD MOV.W		@(Rm, R0), Rn	//Load Word From R0+Rm into Rn
**	0nmE MOV.L		@(Rm, R0), Rn	//Load DWord From R0+Rm into Rn
**	0nmF MOV.Q		@(Rm, R0), Rn	//Load QWord From R0+Rm into Rn

* 1nmd MOV.L		Rm, @(Rn,disp)	//Store DWord Rm to Rn+4*Disp

* 2---
**	2nm0 MOV.B		Rm, @Rn		//Store Byte Rm to @Rn
**	2nm1 MOV.W		Rm, @Rn		//Store Word Rm to @Rn
**	2nm2 MOV.L		Rm, @Rn		//Store DWord Rm to @Rn
**	2nm3 MOV.Q		Rm, @Rn		//Store Quad Rm to @Rn
**	2nm4 MOV.B		Rm, @-Rn	//Store Rm to Byte @Rn then Rn=Rn-1
**	2nm5 MOV.W		Rm, @-Rn	//Store Rm to Word @Rn then Rn=Rn-2
**	2nm6 MOV.L		Rm, @-Rn	//Store Rm to DWord @Rn then Rn=Rn-4
**	2nm7 MOV.Q		Rm, @-Rn	//Store Rm to Quad @Rn then Rn=Rn-8
**	2nm8 TST		Rm, Rn		//Test Rm&Rn, updating SR.T
**	2nm9 AND		Rm, Rn		//And Rm and Rn, Storing result in Rn
**	2nmA XOR		Rm, Rn		//Xor Rm and Rn, Storing result in Rn
**	2nmB OR			Rm, Rn		//Or Rm and Rn, Storing result in Rn
**  2nmC TSTQ		Rm, Rn		//Test Rm&Rn, updating SR.T
**	2nmD MUL.L		Rm, Rn		//DWord Multiply, MACL=Rm*Rn
**	2nmE MULU.W		Rm, Rn		//Unsigned Word Multiply, MACL=Rm*Rn
**	2nmF MULS.W		Rm, Rn		//Signed Word Multiply, MACL=Rm*Rn

* 3---
**	3nm0 CMP/EQ		Rm, Rn		//Compare for Equality
**  3nm1 CMPQ/EQ	Rm, Rn		//Compare for Equality
**	3nm2 CMPQ/HI	Rm, Rn		//Compare for Unsigned Greater
**	3nm3 CMPQ/GT	Rm, Rn		//Compare for Signed Greater
**	3nm4 ? EXTU.L	Rm, Rn		//Zero Extend DWord to QWord
**	3nm5 DMULU.L	Rm, Rn		//Unsigned DW Multiply, QW result in MACH:MACL
**	3nm6 CMP/HI		Rm, Rn		//Compare for unsigned Greater
**	3nm7 CMP/GT		Rm, Rn		//Compare for signed Greater
**	3nm8 SUB		Rm, Rn		//Subtract
**  3nm9 ? EXTS.L	Rm, Rn		//Sign Extend DWord to QWord
**	3nmA SUBC		Rm, Rn		//Subtract, Carry -> T
**	3nmB NOT		Rm, Rn		//Bitwise Not
**	3nmC ADD		Rm, Rn		//Add
**	3nmD DMULS.L	Rm, Rn		//Signed DW Multiply, QW result in MACH:MACL
**	3nmE ADDC		Rm, Rn		//Add with Carry, Carry -> T
**	3nmF ? MUL.Q	Rm, Rn		//QWord Multiply: MACL=Rm*Rn

* 4---
**	4zz0
***  4n00 SHLL Rn
***  4n10 DT Rn
***  4n20 SHAL Rn
***  4n30 CMPQ/PL	Rn
***  4n40 EXTU.B	Rn			//zero extend 8 -> 64
***  4n50 EXTS.B	Rn			//sign extend 8 -> 64
***  4n80 -
***  4mF0 -
**	4zz1
***  4n01 SHLR		Rn
***  4n11 CMPPZ		Rn
***  4n21 SHAR		Rn
***  4n31 CMPQ/PZ	Rn
***  4n41 EXTU.W	Rn			//zero extend 16 -> 64
***  4n51 EXTS.W	Rn			//sign extend 16 -> 64
***  4n41 -
***  4n51 -
***  4n61 SHTF16	FPUL, Rn
***  4m71 LDHF16	Rm, FPUL
***  4m81 MOV.L		Rm, @(GBR, R0)
***  4n91 MOV.Q		Rm, @(GBR, R0)
***  4nA1 MOV.Q		Rm, @(PC, R0)
***  4nB1 FMOV.S	FRm, @(PC, R0)
***  4mC1 MOV.B		Rm, @(PC, R0)
***  4mD1 MOV.W		Rm, @(PC, R0)
***  4mE1 MOV.L		Rm, @(PC, R0)
***  4nF1 -
**	4nm2  STS.Q		SRm, @-Rn
**	4nm3  STC.Q		CRm, @-Rn
**	4zz4
***  4n04 ROTL		Rn
***  4n14 !
***  4-24 ROTCL		Rn
***  4n34 SHLL4		Rn			//Rn=(Rn<<4)
***  4n44 EXTU.L	Rn			//zero extend 32 -> 64
***  4n54 EXTS.L	Rn			//sign extend 32 -> 64
**	4--5
***  4n05 ROTR		Rn			//Rotate Right
***  4n15 CMPPL		Rn			//Compare Rn>0
***  4n25 ROTCR		Rn
***  4n35 SHLR4		Rn			//Rn=(Rn>>4)
***  4n45 -
***  4n55 -
***  4n65 -
***  4n75 -
***	 4n85 MOV.L		@(GBR, R0), Rn
***  4n95 MOV.Q		@(GBR, R0), Rn
***  4nA5 MOV.Q		@(PC, R0), Rn
***  4nB5 FMOV.S	@(PC, R0), FRn
***	 4nC5 MOV.B		@(PC, R0), Rn
***  4nD5 MOV.W		@(PC, R0), Rn
***	 4nE5 MOV.L		@(PC, R0), Rn
***  4nF5 LEA.B		@(PC, R0), Rn
**	4mo6  LDS.Q		@Rm+, SRo
**	4mo7  LDC.Q		@Rm+, CRo

**	4zz8
***  4n08 SHLL2		Rn
***  4n18 SHLL8		Rn
***  4n28 SHLL16	Rn
***  4n38 SHLL32	Rn
***  4m48 PUSH.Q	Rm		//PUSH R0..R15, MOV.Q Rm, @-R15
***  4n58 POP.Q		Rn		//POP R0..R15, MOV.Q @R15+, Rn
***  4m68 PUSH2.Q	Rm		//PUSH R16..R31
***  4n78 POP2.Q	Rn		//POP R16..R31
***  4-88 -
***  ...
***  4-F8 -
**	4zz9
***  4n09 SHLR2		Rn
***  4n19 SHLR8		Rn
***  4n29 SHLR16	Rn
***  4n39 SHLR32	Rn
***  4n49 SWAP.B	Rn			//swap bytes
***  4n59 SWAP.W	Rn			//swap words

***  4mA9 !
***  4mE9 !

**	4moA LDS		Rm, SRo

**	4zzB
***  4m0B JSR Rm
***  4m1B !
***  4m2B JMP Rm
***  ..

**	4nmC SHAD		Rm, Rn		//Arithmetic Shift
**	4nmD SHLD		Rm, Rn		//Logical Shift
**	4moE LDC		Rm, CRo
**	4nmF MOV 		Rm, Rn		//MOV Registers

* 5nmd MOV.L		@(Rm, disp), Rn

* 6---
**	6nm0 MOV.B		@Rm, Rn		//Load Byte
**	6nm1 MOV.W		@Rm, Rn		//Load Word or Quad
**	6nm2 MOV.L		@Rm, Rn		//Load DWord
**	6nm3 MOV.Q		@Rm, Rn		//Load Word or Quad
**	6nm4 MOV.B		@Rm+, Rn	//Load Byte with post-increment
**	6nm5 MOV.W		@Rm+, Rn	//Load Word or Quad with post-increment
**	6nm6 MOV.L		@Rm+, Rn	//Loag DWord with post increment
**	6nm7 MOV.Q		@Rm+, Rn	//Load Word or Quad with post-increment
**	6nm8 SHADQ		Rm, Rn		//Arithmetic Shift
**	6nm9 SHLDQ		Rm, Rn		//Logical Shift
**	6nmA NEGC		Rm, Rn		//Negate with carry
**	6nmB NEG		Rm, Rn		//Negate
**	6nmC ? EXTU.B	Rm, Rn		//Zero Extend Byte
**	6nmD ? EXTU.W	Rm, Rn		//Zero Extend Word
**	6nmE ? EXTS.B	Rm, Rn		//Sign Extend Byte
**	6nmF ? EXTS.W	Rm, Rn		//Sign Extend Word

* 7nii ADD			#imm8s, Rn	//Add immediate to register

* 8---
**	80md -
**	81nd -
**	82dd BRA/N		disp8
**	83dd BSR/N		disp8
**	84zz -
**	85zz -
**	86zz -
**	87zz -
**	88ii CMP/EQ		#imm, R0
**	89dd BT			disp8
**	8Aii (MOVI24)
**	8Bdd BF			disp8
**  8Cxx XPFX2
**	8Ddd BTS		disp8
**	8Eii XPFX0
**	8Fdd BFS		disp8

* 9ndd  MOV.W		@(PC, disp8), Rn	//Load Word PC-Rel

* Addd  BRA			label
* Bddd  BSR			label

* Czzz  (Reserved)
**	C0md MOV.Q		Rm, @(R15, disp4)
**	C1nd -
**	C2dd -
**	C3jj TRAPA		#imm
**	C4nd MOV.Q		@(R15, disp4), Rn
**	C5dd - 
**	C6dd - 
**	C7dd MOVA		@(PC, disp), R0		//Load Address into R0, DWORD aligned.
**	C8jj TST		#imm, R0
**	C9jj AND		#imm, R0
**	CAjj XOR		#imm, R0
**	CBjj OR			#imm, R0
**	CCxx-xxxx		XPFY2
**	CDxx-xxxx(3)
**	CExx-xxxx		XPFY0
**	CFxx-xxxx(2)

* Dndd  MOV.L		@(PC, disp8), Rn	//Load DWord PC-Rel

* Enii  MOV			#imm8s, Rn			//Load immediate into register.

* Fzzz  (FPU Ops)


=== FPU Block ===

FPSCR:
* SZ: Size of FMOV op
* PR: Precision (Float or Double)
* RB: Register Bank

Note that FPU ops within the extended block will behave differently depending on XE:
* XE=0, FPU ops will depend on FPSCR bits for behavior (unless otherwise noted).
** For FMOV, (SZ, PR)
*** (0, x)=Move a single float value.
*** (1, 0)=Move a pair of floats (high half comes first).
*** (1, 1)=Move a pair of floats (low half comes first).
* XE=1, FPU ops will directly encode the operation size.
** Q=0: Operate on Float
** Q=1: Operate on Double
*** For FMOV, Q=1 will behave as if both PR and SZ are set.


FPU Ops
* F---
**	Fnm0 FADD FRm, FRn
**	Fnm1 FSUB FRm, FRn
**	Fnm2 FMUL FRm, FRn
**	Fnm3 FDIV FRm, FRn
**	Fnm4 FCMPEQ FRm, FRn
**	Fnm5 FCMPGT FRm, FRn
**	Fnm6 FMOV.S @(R0,Rm), FRn
**	Fnm7 FMOV.S FRm, @(R0,Rn)
**	Fnm8 FMOV.S @Rm, FRn
**	Fnm9 FMOV.S @Rm+, FRn
**	FnmA FMOV.S FRm, @Rn
**	FnmB FMOV.S FRm, @-Rn
**	FnmC FMOV FRm, FRn
**	F--D
***		Fn0D FSTS FRn
***		Fm1D FLDS FRm
***		Fn2D FLOAT FRn
***		Fm3D FTRC FRm
***		Fn4D FNEG FRn
***		Fn5D FABS FRn
***		Fn6D FSQRT FRn
***		F-7D !
***		Fn8D FLDI0 FRn		//Load 0.0
***		Fn9D FLDI1 FRn		//Load 1.0
***		FnAD FCNVSD FRn
***		FnBD FCNVDS FRm
***		F-CD !
***		FiDD PSETMD #imm4
***		F-ED !
***		F-FD
****			F0FD !
****			F1FD !
****			F2FD !
****			F3FD FSCHG			//Flips FPSCR.SZ
****			F4FD !
****			F5FD !
****			F6FD !
****			F7FD FPCHG			//Flips FPSCR.PR
****			F8FD !
****			F9FD !
****			FAFD !
****			FBFD FRCHG			//Flips FPSCR.FR
****			FCFD !
****			FDFD !
****			FEFD !
**	!
**	F--F ! (BT Reserved-32)


=== Extended 24-bit ISA ===

General:
* Some instruction forms will use instructions from a 24-bit set.
* This set will be shared between 8Exx, CExx, and WJX1.
** The use of 8Exx or CExx will encode the XE bit.
* 8Exx_xxxx, Will encode an instruction with XE=0.
* CExx_xxxx, Will encode an instruction with XE=1.

Nibble:
* d: Displacement

* e: Extension
** e=QNMO / QNII
** Q: 0=DWORD, 1=QWORD
*** Reserved / MBZ for ops which are size-independent.
*** For FPU Ops: 0=Float, 1=Double.
** N/M/O: Bit 4 of Rn, Rm, and Ro.
** Some ops with no Ro may use O to encode Unsigned forms.
*** 0zz0: MOV.L, MULL.L
*** 0zz1: MOVU.L, MULU.L
*** 1zz0: MOV.Q, MUL.Q
*** 1zz1: Resv
** XE is instruction specific.
** Some 3 register ops with a fixed operand size may use Q for Unsigned forms.
* f: Extension 2
** f=NMII / NIII
** XE=0: f=IIII (Rn and Rm are R0..R15)
*** When used as an 8-bit displacement, value is sign-extended.
* m: Rm, typically Source.
* n: Rn, typically Dest.
* o: Ro, typically Index.
* s: Rs, Source A (LHS).
* t: Rt, Source B (RHS).

* z: Unknown / Reserved, Set to Zero


Major Instruction Forms:
* eO-OnOO
* eO-OnmO
* fi-OnmO
* eo-OnmO
* fd-OnmO
* ed-Onmo
* ii-Onii
* The high 24 bits will go into the low 8 bits of the prefix word.
* The remaining 16 bits will be placed into the following word.

Instructions:
* ez-0nm0  -
* ez-0nm1  -
* ez-0nm2  -
* ez-0nm3  -
* eo-0nm4  MOV.B		Rm, @(Rn, Ro)			//XE=1
** od-0nm4 MOV.B		Rm, @(Rn, Ro, disp4)	//XE=0
* eo-0nm5  MOV.W		Rm, @(Rn, Ro)			//XE=1
** od-0nm5 MOV.W		Rm, @(Rn, Ro, disp4)	//XE=0
* eo-0nm6  MOV.L		Rm, @(Rn, Ro)			//XE=1
** od-0nm6 MOV.L		Rm, @(Rn, Ro, disp4)	//XE=0
* eo-0nm7  MOV.Q		Rm, @(Rn, Ro)			//XE=1
** od-0nm7 MOV.Q		Rm, @(Rn, Ro, disp4)	//XE=0
* ez-0nm8
** zz-0z08 -

** e1-0m18 CMP/PZ	Rn
** eA-0m18 ! MOV.Q		Rm, @(PC, R0)
** eB-0m18 ! FMOV.S		FRm, @(PC, R0)
** eC-0m18 ! MOV.B		Rm, @(PC, R0)
** eD-0m18 ! MOV.W/Q	Rm, @(PC, R0)
** eE-0m18 ! MOV.L		Rm, @(PC, R0)

** zz-0z28 -

** e0-0n38 BSRF		Rn				//BSR, PC+Rn (Indirect Relative Call)
** e1-0n38 JSR		Rn				//BSR, Rn (Indirect call to address)
** e2-0n38 BRAF		Rn				//BRA, PC+Rn (Indirect Relative Branch)
** e3-0n38 JMP		Rn				//BRA, Rn (Indirect branch to address)

** zz-0z48 -

** e1-0m58 CMP/PL	Rn
** eA-0n58 ! MOV.Q @(PC, R0), Rn
** eB-0n58 ! FMOV.S @(PC, R0), FRn
** eC-0n58 ! MOV.B @(PC, R0), Rn
** eD-0n58 ! MOV.W/Q @(PC, R0), Rn
** eE-0n58 ! MOV.L @(PC, R0), Rn
** eF-0n58 ! LEA.B @(PC, R0), Rn

** zz-0z68 -
** zz-0z78 -
** z0-0z88 CLRT
** z1-0z88 SETT
** z2-0z88 -
** z3-0z88 -
** z4-0z88 CLRS
** z5-0z88 CLRS
** z6-0z88 NOTT
** z0-0z98 NOP
** zz-0zA8 -
** z0-0zB8 RTS
** z1-0zB8 SLEEP
** z2-0zB8 RTE
** z3-0zB8 BREAK
** z4-0zB8 -
** z5-0zB8 -
** z6-0zB8 RTS/N
** e7-0mB8 RTV/N
** zz-0zC8 -
** zz-0zD8 -
** zz-0zE8 -
** zz-0zF8 -
* ez-0nm9  -
* ez-0nmA
** e0-0nmA STS		Sm, Rn					//XE=1
** e1-0nmA STC		Cm, Rn					//XE=1
** e2-0nmA STS		Sm, @-Rn				//XE=1
** e3-0nmA STC		Cm, @-Rn				//XE=1
** e4-0nmA LDS		Rn, Sm					//XE=1
** e5-0nmA LDC		Rn, Cm					//XE=1
** e6-0nmA LDS		@Rn+, Sm				//XE=1
** e7-0nmA LDC		@Rn+, Cm				//XE=1

* ez-0nmB  -
* eo-0nmC  MOV.B		@(Rm, Ro), Rn			//XE=1
** od-0nmC MOV.B		@(Rm, Ro, disp4), Rn	//XE=0
* eo-0nmD  MOV.W		@(Rm, Ro), Rn			//XE=1
** od-0nmD MOV.W		@(Rm, Ro, disp4), Rn	//XE=0
* eo-0nmE  MOV.L		@(Rm, Ro), Rn			//XE=1
** od-0nmE MOV.L		@(Rm, Ro, disp4), Rn	//XE=0
* eo-0nmF  MOV.Q		@(Rm, Ro), Rn			//XE=1
** od-0nmF MOV.Q		@(Rm, Ro, disp4), Rn	//XE=0

* ed-1nmo  MOV.L/Q	Rm, @(Rn, Ro, disp4)

* fd-2nm0  MOV.B		Rm, @(Rn, disp6)		//Store Byte Rm to @Rn
* fd-2nm1  MOV.W		Rm, @(Rn, disp6)		//Store Word Rm to @Rn
* fd-2nm2  MOV.L		Rm, @(Rn, disp6)		//Store DWord Rm to @Rn
* fd-2nm3  MOV.Q		Rm, @(Rn, disp6)		//Store QWord Rm to @Rn
* ez-2nm4  -
* ez-2nm5  -
* ez-2nm6  -
* ez-2nm7  -
* ez-2nm8  -
** e0-2nm8 CMOV.B/W		Rm, @(Rn, R0)
** e1-2nm8 CMOV.L/Q		Rm, @(Rn, R0)
** e2-2nm8 CMOV.B/W		Rm, @Rn
** e3-2nm8 CMOV.L/Q		Rm, @Rn
** e4-2nm8 CMOV.B/W		Rm, @-Rn
** e5-2nm8 CMOV.L/Q		Rm, @-Rn
** e6-2nm8 -
** e7-2nm8 -
** e8-2nm8 CMOV.B/W		@(Rm, R0), Rn
** e9-2nm8 CMOV.L/Q		@(Rm, R0), Rn
** eA-2nm8 CMOV.B/W		@Rm, Rn
** eB-2nm8 CMOV.L/Q		@Rm, Rn
** eC-2nm8 CMOV.B/W		@Rm+, Rn
** eD-2nm8 CMOV.L/Q		@Rm+, Rn
** eE-2nm8 -
** eF-2nm8 -
*** E.Q: Size
*** E.O: 0=Move if True, 1=Move if False
* fj-2nm9  AND		Rm, #imm6, Rn		//And
* fj-2nmA  XOR		Rm, #imm6, Rn		//Xor
* fj-2nmB  OR		Rm, #imm6, Rn		//Or
* fi-2nmC  -
* fi-2nmD  -
* fj-2nmE  MULL		Rm, #imm6, Rn	//Rn=Rm*Imm6 (Imm6 Zero-Ext)
* fj-2nmF  MULL		Rm, #-imm6, Rn	//Rn=Rm*Imm6 (Imm6 One-Ext)

* ei-3ni0  CMP/EQ	#imm10s, Rn		//Compare for Equality
* ez-3nm1  -
* ei-3ni2  CMP/HS	#imm10s, Rn		//Compare for Greater/Equal
* ei-3ni3  CMP/GE	#imm10s, Rn		//Compare for Greater/Equal
* ez-3nm4  -
* ez-3nm5  -
* ei-3ni6  CMP/HI	#imm10s, Rn		//Compare for Greater
* ei-3ni7  CMP/GT	#imm10s, Rn		//Compare for Greater
* fj-3nm8  SUB		Rm, #imm6, Rn	//Subtract, Rn=Rm-imm6
* fj-3nm9  AND		Rm, #-imm6, Rn
* fi-3nmA  SHAR.Q	Rm, #imm6, Rn	//Rn=Rm>>Imm6, Arithmetic
* fi-3nmB  SHLR.Q	Rm, #imm6, Rn	//Rn=Rm>>Imm6, Logical
* fj-3nmC  ADD		Rm, #imm6, Rn	//Add, Rn=Rm+imm6
* fi-3nmD  SHLL.Q	Rm, #imm6, Rn	//Rn=Rm<<Imm6
* ez-3nmE  -
* ez-3nmF
** e0-3nmF CMP/EQ	Rm, Rn			//e.o=0: Compare for Equality
** e1-3nmF -
** e2-3nmF CMP/HS	Rm, Rn			//Compare for unsigned Greater/Equal
** e3-3nmF CMP/GE	Rm, Rn			//Compare for signed Greater/Equal
** e4-3nmF -
** e5-3nmF DMULU.L	Rm, Rn			//MACH:MACL=Rm*Rn, DW or QW
** e6-3nmF CMP/HI	Rm, Rn			//Compare for unsigned Greater
** e7-3nmF CMP/GT	Rm, Rn			//Compare for signed Greater
** e8-3nmF SUB		Rm, Rn			//Subtract
** e9-3nmF MUL.L/Q	Rm, Rn			//MAC=Rm*Rn
** eA-3nmF SUBC		Rm, Rn			//Subtract, Carry -> T
** eB-3nmF SUBV		Rm, Rn			//Subtract, Overflow -> T
** eC-3nmF ADD		Rm, Rn			//Add
** eD-3nmF DMULS.L	Rm, Rn			//MACH:MACL=Rm*Rn, DW or QW
** eE-3nmF ADDC		Rm, Rn			//Add with Carry, Carry -> T
** eF-3nmF ADDV		Rm, Rn			//Add, Overflow -> T

* ez-4nm0  -
* ez-4nm1  -
* ez-4nm2  -
* ez-4nm3  ! (3R Block)
* ez-4nm4  -
* ez-4nm5  -
* ez-4nm6  -
* ez-4nm7  -
* ez-4nm8  -
* ez-4nm9  -
* ez-4nmA  -
* ez-4nmB  -
* fi-4nmC  SHAD.L	Rm, #imm6, Rn
* fi-4nmD  SHLD.L	Rm, #imm6, Rn
* ez-4nmE  ! (MOVU Block)
* ez-4nmF
** e0-4nmF MOV		Rm, Rn			//Rn=Rm
** e1-4nmF -
** e2-4nmF -
** e3-4nmF -
** e4-4nmF -
** e5-4nmF -
** e6-4nmF -
** e7-4nmF NOT		Rm, Rn			//Rn=~Rm
** e8-4nmF TST		Rm, Rn			//Test Rm&Rn, updating SR.T
** e9-4nmF AND		Rm, Rn			//And Rm and Rn, Storing result in Rn
** eA-4nmF XOR		Rm, Rn			//Xor Rm and Rn, Storing result in Rn
** eB-4nmF OR		Rm, Rn			//Or Rm and Rn, Storing result in Rn
** eC-4nmF SHAD		Rm, Rn
** eD-4nmF SHLD		Rm, Rn
** eE-4nmF -
** eF-4nmF -

* ed-5nmo  MOV.L/Q	@(Rm, Ro, disp4), Rn

* fd-6nm0  MOV.B	@(Rm, disp6), Rn
* fd-6nm1  MOV.W	@(Rm, disp6), Rn
* fd-6nm2  MOV.L	@(Rm, disp6), Rn
* fd-6nm3  MOV.Q	@(Rm, disp6), Rn
* eo-6nm4  LEA.B	@(Rm, Ro), Rn
* eo-6nm5  LEA.W	@(Rm, Ro), Rn
* eo-6nm6  LEA.L	@(Rm, Ro), Rn
* eo-6nm7  LEA.Q	@(Rm, Ro), Rn
* fd-6nm8  LEA.B	@(Rm, disp6), Rn
* fd-6nm9  LEA.W	@(Rm, disp6), Rn
* fd-6nmA  LEA.L	@(Rm, disp6), Rn
* fd-6nmB  LEA.Q	@(Rm, disp6), Rn
* fd-6nmC  MOVU.B	@(Rm, disp6), Rn
* fd-6nmD  MOVU.W	@(Rm, disp6), Rn
* fd-6nmE  MOVU.L	@(Rm, disp6), Rn
* ez-6nmF
** e0-6nmF MOV.B	Rm, @-Rn		//Store Rm to Byte @Rn then Rn=Rn-1
** e1-6nmF MOV.W	Rm, @-Rn		//Store Rm to Word @Rn then Rn=Rn-2
** e2-6nmF MOV.L	Rm, @-Rn		//Store Rm to DWord @Rn then Rn=Rn-4
** e3-6nmF MOV.Q	Rm, @-Rn
** e4-6nmF MOV.B	@Rm+, Rn
** e5-6nmF MOV.W	@Rm+, Rn
** e6-6nmF MOV.L	@Rm+, Rn
** e7-6nmF MOV.Q	@Rm+, Rn
** e8-6nmF SWAP.B	Rm, Rn			//Swap Bytes
** e9-6nmF SWAP.W	Rm, Rn			//Swap Words
** eA-6nmF NEGC		Rm, Rn
** eB-6nmF NEG		Rm, Rn
** eC-6nmF EXTU.B	Rm, Rn
** eD-6nmF EXTU.W/L	Rm, Rn
** eE-6nmF EXTS.B	Rm, Rn
** eF-6nmF EXTS.W/L	Rm, Rn

* ii-7nii  ADD		#imm16s, Rn		//Add 16-bit Immed
** XE=0: Rn=R0..R15
** XE=1: Rn=R16..R31

* zz-80zz  -
* zz-81zz  -
* fd-82dd  BRA/N	disp15s
* fd-83dd  BSR/N	disp15s
* zz-84zz  -
* zz-85zz  -
* fd-86dd  BRA		disp15s
* fd-87dd  BSR		disp15s
* zz-88zz  -
* fd-89dd  BT		disp15s
* ii-8Aii  LDHF16	#imm, FPUL		//Load Half Imm16 into FPUL Float
* fd-8Bdd  BF		disp15s
* ii-8Cii  LDIF16	#imm, FPUL		//Load (Imm16<<16) into FPUL
* fd-8Ddd  BTS		disp15s
* zz-8Ezz  -
* fd-8Fdd  BFS		disp15s

* ii-9nii / LDSH16	#imm16, Rn		//Rn=(Rn<<16)+Imm16
* jj-9njj LDSH16Z	#imm16, Rn		//Rn=(Rn<<16)|Imm16
** XE=0: Rn=R0..R15
** XE=1: Rn=R16..R31

* eo-Anm0  ADD		Rm, Ro, Rn		//Add, Rn=Rm+Ro
* eo-Anm1  SUB		Rm, Ro, Rn		//Subtract, Rn=Rm-Ro
* eo-Anm2  MUL		Rm, Ro, Rn		//Multiply, Keep Low Bits, Rn=Rm*Ro
* eo-Anm3  AND		Rm, Ro, Rn		//And Rm and Rn, Storing result in Rn
* eo-Anm4  OR		Rm, Ro, Rn		//Rn=Rm|Ro
* eo-Anm5  XOR		Rm, Ro, Rn		//Rn=Rm^Ro
* eo-Anm6  SHLD.L/Q	Rm, Ro, Rn
* eo-Anm7  SHLR.L/Q	Rm, Ro, Rn
* eo-Anm8  SHAD.L/Q	Rm, Ro, Rn
* eo-Anm9  SHAR.L/Q	Rm, Ro, Rn
* eo-AnmA  CSELT	Rm, Ro, Rn		//Rn=SR.T?Rm:Ro
* eo-AnmB  -
* eo-AnmC  MULUH	Rm, Ro, Rn		//Multiply, Rn=(Rm*Ro)>>N
* eo-AnmD  MULSH	Rm, Ro, Rn		//Multiply, Rn=(Rm*Ro)>>>N
* eo-AnmE  -
* eo-AnmF  -

* ii-Biii -

* zz-Czzz  -
* fd-C0md ? MOV.B	Rm, @(GBR, disp10s)		//(XE=1)
* fd-C1md ? MOV.W	Rm, @(GBR, disp10s)		//(XE=1)
* fd-C2md ? MOV.L	Rm, @(GBR, disp10s)		//(XE=1)
* fd-C3md ? MOV.Q	Rm, @(GBR, disp10s)		//(XE=1)
* fd-C4nd ? MOV.B	@(GBR, disp10s), Rn		//(XE=1)
* fd-C5nd ? MOV.W	@(GBR, disp10s), Rn		//(XE=1)
* fd-C6nd ? MOV.L	@(GBR, disp10s), Rn		//(XE=1)
* fd-C7nd ? MOV.Q	@(GBR, disp10s), Rn		//(XE=1)
** F.N: 0=GBR, 1=SP
* fi-C8ni TST		#imm10s, Rn
* fi-C9ni AND		#imm10s, Rn
* fi-CAni XOR		#imm10s, Rn
* fi-CBni OR		#imm10s, Rn

* ii-Diii  -

* ii-Enii MOV		#imm16s, Rn		//Load 16-bit constant
** XE=0: Rn=R0..R15
** XE=1: Rn=R16..R31

* zz-Fzzz

* eo-Fnm0  FADD		FRm, FRo, FRn
* eo-Fnm1  FSUB		FRm, FRo, FRn
* eo-Fnm2  FMUL		FRm, FRo, FRn
* eo-Fnm3  FDIV		FRm, FRo, FRn
* eo-Fnm4  -
* eo-Fnm5  -
* eo-Fnm6  FMOV		@(Rm, Ro), FRn
* eo-Fnm7  FMOV		FRm, @(Rn, Ro)
* ed-Fnm8  FMOV		@(Rm, disp4), FRn	//XE=1
** ed-Fnm8 FMOV		@(Rm, disp8s), FRn	//XE=0
* eo-Fnm9  -
* ed-FnmA  FMOV		FRm, @(Rn, disp4)	//XE=1
** dd-FnmA FMOV		FRm, @(Rn, disp8s)	//XE=0
* eo-FnmB  -
* eo-FnmC
*  e0-FnmC -
*  e1-FnmC -
*  e2-FnmC -
*  e3-FnmC -
*  e4-FnmC FCMPEQ	FRm, FRn
*  e5-FnmC FCMPGT	FRm, FRn
*  e6-FnmC FMOV		Rm, FRn
*  e7-FnmC FMOV		FRm, Rn
*  e8-FnmC -
*  e9-FnmC FMOV		@Rm+, FRn
*  eA-FnmC -
*  eB-FnmC FMOV		FRm, @Rn-
*  eC-FnmC FMOV		FRm, FRn
*  eD-FnmC -
*  eE-FnmC -
*  eF-FnmC -

* eo-FnmD
*  e0-Fn0D FSTS		FRn
*  e1-Fm0D FLDS		FRm
*  e2-Fn0D FLOAT		FRn
*  e3-Fm0D FTRC		FRm
*  e4-Fn0D FNEG		FRn
*  e5-Fn0D FABS		FRn
*  e6-Fn0D FSQRT		FRn
*  e7-Fi0D -
*  e8-Fn0D FLDI0		FRn		//Load 0.0
*  e9-Fn0D FLDI1		FRn		//Load 1.0
*  eA-Fn0D FCNVSD	FRn
*  eB-Fn0D FCNVDS	FRm
*  eC-Fi0D -
*  iD-Fi0D PSETMD	#imm8
*  eE-Fi0D -
*  eF-Fi0D -
* eo-FnmE
* eo-FnmF


=== WJX1 ISA (Extension) ===

WJX1
* VLIW Based.
* Instruction blocks are 64 or 128 bits.
** These will encode 2 or 4 logical instructions.
* Each logical instruction will be 24 bits.
* Will constrain the positions in which instructions can appear.
** Each 128-bit cache block is divided into positions.
*** (PC&15): 0, 2, 4, 6, 8, A, C, E.
** 16 and 32 bit (SH/BJX1) instructions may appear in any position.
** Standalone 64-bit blocks may appear in 0..A if W=0.
** 64-bit blocks may only appear in position 0 or 8 if W=1.
** 128-bit blocks may only appear in position 0 (128-bit aligned)
* Actual width of core is variable.
** Whether 2, 4, or more instructions may execute per cycle is not defined.
** Code should not be generated to depend on a particular width.


64-bit block:
* 8CAt_uuvv_uuuu_vvvv
* t=WABC
** W: Allow Chain
** A: XE/A (Slot 1)
** B: XE/B (Slot 2)
** C: Reserved (0)
* W:
** Setting this bit allows the following block to execute in parallel.
** Only allowed to be set at positions 0 or 8.
** If a 64-bit block chains from position 8, effective width is undefined.
* XE:
** Changes the encoding/interpretation of some instructions.
** Is undefined or ignored for others.

128-bit block:
* Consists of a pair of 64-bit blocks end-to-end.
** 8CAt_uuvv_uuuu_vvvv_8CAt_xxyy_xxxx_yyyy
* The first block has T.W set.
** Second T.W: Whether the following block may be chained.
* Requires proper 128-bit alignment.
* First block will be slots 1 and 2, Second block will be slots 3 and 4.


* Some instructions will be specific to specific slots.
** Compare and Branch instructions may only appear in Slot1.
** MUL and SHAD may also be specific to Slot1.
** Along with operations which access memory.
** Along with anything else that modifies SR.

* Branches may have a Delay Slot.
** In delay-slot forms, the following instruction block will be executed.
** In non-delay-slot forms, the pipeline will be flushed.
** F.N: Will select between Word and QWord.
*** F.N=0: PC1=(PC+10)+(disp*2)
*** F.N=1: PC1=((PC+16)&(~7))+(disp*8)

